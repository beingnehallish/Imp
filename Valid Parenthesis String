class Solution {
    public boolean checkValidString(String s) {
        Stack<Integer> open = new Stack<>();  // positions of '('
        Stack<Integer> star = new Stack<>();  // positions of '*'

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);

            if (c == '(')
                open.push(i);
            else if (c == '*')
                star.push(i);
            else { // c == ')'
                if (!open.isEmpty())
                    open.pop(); // match with '('
                else if (!star.isEmpty())
                    star.pop(); // treat '*' as '('
                else
                    return false; // unmatched ')'
            }
        }

        // Match remaining '(' with '*' (as ')') from right to left
        while (!open.isEmpty() && !star.isEmpty()) {
            if (open.pop() > star.pop()) return false; // invalid order
        }

        return open.isEmpty();
    }
}
